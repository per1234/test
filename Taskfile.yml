# See: https://taskfile.dev/#/usage
version: "3"

vars:
  # Path of the project's primary Go module:
  DEFAULT_GO_MODULE_PATH: ./
  # Path of the primary npm-managed project:
  DEFAULT_NPM_PROJECT_PATH: ./
  # The Go version used for project development.
  GO_VERSION: 1.22

tasks:
  check:
    desc: Check for problems with the project
    deps:
      - task: ci:validate
      - task: ejs:lint
      - task: general:check-filenames
      - task: general:check-formatting
      - task: general:check-spelling
      - task: general:check-symlinks
      - task: js:lint
      - task: js:test
      - task: json:lint
      - task: markdown:check-links
      - task: markdown:lint
      - task: npm:validate
      - task: poetry:validate
      - task: shell:check
        vars:
          SCRIPT_PATH: assets/bump-package.sh
      - task: shell:check-mode
        vars:
          SCRIPT_PATH: assets/bump-package.sh
      - task: yaml:lint

  fix:
    desc: Make automated corrections to the project's files
    deps:
      - task: general:correct-spelling
      - task: general:format-prettier
      - task: go:tidy
      - task: js:fix
      - task: json:fix
      - task: markdown:fix
      - task: markdown:toc
        vars:
          FILE_PATH: README.md
          MAX_DEPTH: 4
      - task: npm:install-deps
      - task: poetry:sync
      - task: shell:format
        vars:
          SCRIPT_PATH: assets/bump-package.sh

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-workflows-task/Taskfile.yml
  ci:validate:
    desc: Validate GitHub Actions workflows against their JSON schema
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/github-workflow.json
      WORKFLOW_SCHEMA_URL: https://json.schemastore.org/github-workflow
      WORKFLOW_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="workflow-schema-XXXXXXXXXX.json"
      WORKFLOWS_DATA_PATH: "./.github/workflows/*.{yml,yaml}"
    deps:
      - task: npm:install-deps
    cmds:
      - |
        wget \
          --quiet \
          --output-document="{{.WORKFLOW_SCHEMA_PATH}}" \
          {{.WORKFLOW_SCHEMA_URL}}
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -c ajv-formats \
            -s "{{.WORKFLOW_SCHEMA_PATH}}" \
            -d "{{.WORKFLOWS_DATA_PATH}}"

  docs:generate:
    desc: Create all generated documentation content
    # This is an "umbrella" task used to call any documentation generation processes the project has.
    # It can be left empty if there are none.

  ejs:lint:
    desc: Lint EJS code
    vars:
      # The command is defined in a Taskfile variable to allow it to be broken into multiple lines for readability.
      # This can't be done in the `cmd` object of the Taskfile because `npx --call` uses the native shell, which causes
      # standard newline escaping syntax to not work when the task is run on Windows.
      #
      # Using -regex instead of -name to avoid Task's behavior of globbing even when quoted on Windows
      # The odd method for escaping . in the regex is required for windows compatibility because mvdan.cc/sh gives
      # \ characters special treatment on Windows in an attempt to support them as path separators.
      #
      # prettier-ignore
      EJS_LINT_COMMAND:
        "
          find . \
            -type d -name \".git\" -prune -o \
            -type d -name \".licenses\" -prune -o \
            -type d -name \"__pycache__\" -prune -o \
            -type d -name \"node_modules\" -prune -o \
            -regex \".*[.]ejs\" \
            -exec \
              ejslint \
                \\{\\} \
                +
        "
    deps:
      - task: npm:install-deps
    cmds:
      - |
        npx \
          --package=ejs-lint \
          --call='{{.EJS_LINT_COMMAND}}'

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-files-task/Taskfile.yml
  general:check-filenames:
    desc: Check for non-portable filenames
    cmds:
      - |
        find . \
          -type d -name '.git' -prune -o \
          -type d -name '.licenses' -prune -o \
          -type d -name '__pycache__' -prune -o \
          -type d -name 'node_modules' -prune -o \
          -exec \
            sh \
              -c \
                ' \
                  basename "$0" | \
                    grep \
                      --extended-regexp \
                      --regexp='"'"'([<>:"/\\|?*'"'"'"$(printf "\001-\037")"'"'"'])|(.+\.$)'"'"' \
                      --silent \
                  && \
                  echo "$0"
                ' \
              '{}' \
            \; \
          -execdir \
            false \
            '{}' \
            + \
        || \
        {
          echo
          echo "Prohibited characters found in filenames"
          echo "See:"
          echo "https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions:~:text=except%20for%20the%20following"
          false
        }
      - |
        find . \
          -type d -name '.git' -prune -o \
          -type d -name '.licenses' -prune -o \
          -type d -name '__pycache__' -prune -o \
          -type d -name 'node_modules' -prune -o \
          -exec \
            sh \
              -c \
                ' \
                  basename "$0" | \
                    grep \
                      --ignore-case \
                      --extended-regexp \
                      --regexp='"'"'^(con|prn|aux|nul|com[0-9]+|lpt[0-9]+)$'"'"' \
                      --silent \
                  && \
                  echo "$0"
                ' \
              '{}' \
            \; \
          -execdir \
            false \
            '{}' \
            + \
        || \
        {
          echo
          echo "Reserved filenames found"
          echo "See:"
          echo "https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions:~:text=use%20the%20following-,reserved%20names,-for%20the%20name"
          false
        }

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-general-formatting-task/Taskfile.yml
  general:check-formatting:
    desc: Check basic formatting style of all files
    cmds:
      - |
        go \
          install \
            github.com/editorconfig-checker/editorconfig-checker/v3/cmd/editorconfig-checker
      - editorconfig-checker

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/spell-check-task/Taskfile.yml
  general:check-spelling:
    desc: Check for commonly misspelled words
    deps:
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - poetry run codespell

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-files-task/Taskfile.yml
  general:check-symlinks:
    desc: Check for bad symlinks
    cmds:
      - |
        find . \
          -type d -name '.git' -prune -o \
          -type d -name '.licenses' -prune -o \
          -type d -name '__pycache__' -prune -o \
          -type d -name 'node_modules' -prune -o \
          -type l \
          -execdir \
            test ! -e '{}' \
            \; \
          -exec \
            echo '{}' \
            \; \
          -execdir \
            false \
            '{}' \
            + \
        || \
        {
          echo 'Broken or circular symlink found'
          false
        }

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/spell-check-task/Taskfile.yml
  general:correct-spelling:
    desc: Correct commonly misspelled words where possible
    deps:
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - poetry run codespell --write-changes

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-prettier-formatting-task/Taskfile.yml
  general:format-prettier:
    desc: Format all supported files with Prettier
    deps:
      - task: npm:install-deps
    cmds:
      - npx prettier --write .

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:tidy:
    desc: |
      Refresh dependency metadata.
      Environment variable parameters:
      GO_MODULE_PATH: Path of the Go module (default: {{.DEFAULT_GO_MODULE_PATH}}).
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - |
        go \
          mod \
            tidy \
              -compat={{.GO_VERSION}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-javascript-task/Taskfile.yml
  js:fix:
    desc: Fix JavaScript code linting violations
    deps:
      - task: npm:install-deps
    cmds:
      - npx eslint --ext .js,.jsx --fix .

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-javascript-task/Taskfile.yml
  js:lint:
    desc: Lint JavaScript code
    deps:
      - task: npm:install-deps
    cmds:
      - npx eslint --ext .js,.jsx .

  # Source: https://github.com/per1234/.github/blob/main/workflow-templates/assets/test-javascript-jest-task/Taskfile.yml
  js:test:
    desc: |
      Test the project's JavaScript/TypeScript code.
      Environment variable parameters:
      PROJECT_PATH: Path of the npm-managed project (default: {{.DEFAULT_NPM_PROJECT_PATH}}).
    deps:
      - task: npm:install-deps
    dir: |
      "{{default .DEFAULT_NPM_PROJECT_PATH .PROJECT_PATH}}"
    cmds:
      # See: https://jestjs.io/docs/ecmascript-modules#:~:text=Execute%20node%20with%20%2D%2Dexperimental%2Dvm%2Dmodules
      - |
        NODE_OPTIONS="$NODE_OPTIONS --experimental-vm-modules" \
        npx \
          jest \
            --coverage

  json:fix:
    desc: Fix JSON code linting violations
    deps:
      - task: npm:install-deps
    cmds:
      - |
        npx \
          eslint \
            --ext \
              .json,.jsonc,.json5 \
            --fix \
            .

  json:lint:
    desc: Lint JSON code
    deps:
      - task: npm:install-deps
    cmds:
      - |
        npx \
          eslint \
            --ext \
              .json,.jsonc,.json5 \
            .

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:check-links:
    desc: Check for broken links
    vars:
      # The command is defined in a Taskfile variable to allow it to be broken into multiple lines for readability.
      # This can't be done in the `cmd` object of the Taskfile because `npx --call` uses the native shell, which causes
      # standard newline escaping syntax to not work when the task is run on Windows.
      #
      # Using -regex instead of -name to avoid Task's behavior of globbing even when quoted on Windows
      # The odd method for escaping . in the regex is required for windows compatibility because mvdan.cc/sh gives
      # \ characters special treatment on Windows in an attempt to support them as path separators.
      #
      # prettier-ignore
      CHECK_LINKS_COMMAND:
        "
          find . \
            -type d -name \".git\" -prune -o \
            -type d -name \".licenses\" -prune -o \
            -type d -name \"__pycache__\" -prune -o \
            -type d -name \"node_modules\" -prune -o \
            -type d -name \"testdata\" -prune -o \
            -regex \".*[.]md\" \
            -exec \
              markdown-link-check \
                --quiet \
                --config \"./.markdown-link-check.json\" \
                \\{\\} \
                +
        "
    deps:
      - task: docs:generate
      - task: npm:install-deps
    cmds:
      - |
        npx \
          --package=markdown-link-check \
          --call='{{.CHECK_LINKS_COMMAND}}'

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:fix:
    desc: Automatically correct linting violations in Markdown files where possible
    deps:
      - task: npm:install-deps
    cmds:
      - npx markdownlint-cli --fix "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:lint:
    desc: Check for problems in Markdown files
    deps:
      - task: npm:install-deps
    cmds:
      - npx markdownlint-cli "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-toc-task/Taskfile.yml
  markdown:toc:
    desc: |
      Update the table of contents
      Environment variable parameters:
      FILE_PATH: Path of the file in which to update the ToC.
      MAX_DEPTH: The maximum heading level for which to add ToC items.
    deps:
      - task: npm:install-deps
    cmds:
      - |
        npx \
          markdown-toc \
            --bullets=- \
            --maxdepth={{.MAX_DEPTH}} \
            -i \
            "{{.FILE_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/npm-task/Taskfile.yml
  npm:install-deps:
    desc: |
      Install dependencies managed by npm.
      Environment variable parameters:
      PROJECT_PATH: Path of the npm-managed project (default: {{.DEFAULT_NPM_PROJECT_PATH}}).
    dir: |
      "{{default .DEFAULT_NPM_PROJECT_PATH .PROJECT_PATH}}"
    cmds:
      - npm install

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-npm-task/Taskfile.yml
  npm:validate:
    desc: |
      Validate npm configuration files against their JSON schema.
      Environment variable parameters:
      PROJECT_PATH: Path of the npm-managed project (default: {{.DEFAULT_NPM_PROJECT_PATH}}).
    deps:
      - task: npm:install-deps
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/package.json
      SCHEMA_URL: https://json.schemastore.org/package.json
      SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="package-json-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/ava.json
      AVA_SCHEMA_URL: https://json.schemastore.org/ava.json
      AVA_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="ava-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/base.json
      BASE_SCHEMA_URL: https://json.schemastore.org/base.json
      BASE_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="base-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/eslintrc.json
      ESLINTRC_SCHEMA_URL: https://json.schemastore.org/eslintrc.json
      ESLINTRC_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="eslintrc-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/jscpd.json
      JSCPD_SCHEMA_URL: https://json.schemastore.org/jscpd.json
      JSCPD_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="jscpd-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/npm-badges.json
      NPM_BADGES_SCHEMA_URL: https://json.schemastore.org/npm-badges.json
      NPM_BADGES_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="npm-badges-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/partial-eslint-plugins.json
      PARTIAL_ESLINT_PLUGINS_SCHEMA_URL: https://json.schemastore.org/partial-eslint-plugins.json
      PARTIAL_ESLINT_PLUGINS_PATH:
        sh: task utility:mktemp-file TEMPLATE="partial-eslint-plugins-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/prettierrc.json
      PRETTIERRC_SCHEMA_URL: https://json.schemastore.org/prettierrc.json
      PRETTIERRC_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="prettierrc-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/semantic-release.json
      SEMANTIC_RELEASE_SCHEMA_URL: https://json.schemastore.org/semantic-release.json
      SEMANTIC_RELEASE_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="semantic-release-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/stylelintrc.json
      STYLELINTRC_SCHEMA_URL: https://json.schemastore.org/stylelintrc.json
      STYLELINTRC_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="stylelintrc-schema-XXXXXXXXXX.json"
      INSTANCE_PATH: >-
        {{default .DEFAULT_NPM_PROJECT_PATH .PROJECT_PATH}}/package.json
    cmds:
      - wget --quiet --output-document="{{.SCHEMA_PATH}}" {{.SCHEMA_URL}}
      - wget --quiet --output-document="{{.AVA_SCHEMA_PATH}}" {{.AVA_SCHEMA_URL}}
      - wget --quiet --output-document="{{.BASE_SCHEMA_PATH}}" {{.BASE_SCHEMA_URL}}
      - wget --quiet --output-document="{{.ESLINTRC_SCHEMA_PATH}}" {{.ESLINTRC_SCHEMA_URL}}
      - wget --quiet --output-document="{{.JSCPD_SCHEMA_PATH}}" {{.JSCPD_SCHEMA_URL}}
      - wget --quiet --output-document="{{.NPM_BADGES_SCHEMA_PATH}}" {{.NPM_BADGES_SCHEMA_URL}}
      - wget --quiet --output-document="{{.PARTIAL_ESLINT_PLUGINS_PATH}}" {{.PARTIAL_ESLINT_PLUGINS_SCHEMA_URL}}
      - wget --quiet --output-document="{{.PRETTIERRC_SCHEMA_PATH}}" {{.PRETTIERRC_SCHEMA_URL}}
      - wget --quiet --output-document="{{.SEMANTIC_RELEASE_SCHEMA_PATH}}" {{.SEMANTIC_RELEASE_SCHEMA_URL}}
      - wget --quiet --output-document="{{.STYLELINTRC_SCHEMA_PATH}}" {{.STYLELINTRC_SCHEMA_URL}}
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -s "{{.SCHEMA_PATH}}" \
            -r "{{.AVA_SCHEMA_PATH}}" \
            -r "{{.BASE_SCHEMA_PATH}}" \
            -r "{{.ESLINTRC_SCHEMA_PATH}}" \
            -r "{{.JSCPD_SCHEMA_PATH}}" \
            -r "{{.NPM_BADGES_SCHEMA_PATH}}" \
            -r "{{.PARTIAL_ESLINT_PLUGINS_PATH}}" \
            -r "{{.PRETTIERRC_SCHEMA_PATH}}" \
            -r "{{.SEMANTIC_RELEASE_SCHEMA_PATH}}" \
            -r "{{.STYLELINTRC_SCHEMA_PATH}}" \
            -d "{{.INSTANCE_PATH}}"

  poetry:install:
    desc: Install Poetry
    run: once
    vars:
      PYTHON_PATH:
        sh: task utility:normalize-path RAW_PATH="$(which python)"
    cmds:
      - |
        if ! which pipx &>/dev/null; then
          echo "pipx not found or not in PATH."
          echo "Please install: https://pipx.pypa.io/stable/installation/#installing-pipx"
          exit 1
        fi
      - |
        if ! which yq &>/dev/null; then
          echo "yq not found or not in PATH."
          echo "Please install: https://github.com/mikefarah/yq/#install"
          exit 1
        fi
      - |
        pipx install \
          --python "{{.PYTHON_PATH}}" \
          "poetry==$( \
            yq \
              --input-format toml \
              --output-format yaml \
              '.tool.poetry.group.pipx.dependencies.poetry' \
              < pyproject.toml
          )"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/poetry-task/Taskfile.yml
  poetry:install-deps:
    desc: |
      Install dependencies managed by Poetry.
      Environment variable parameters:
      POETRY_GROUPS: Poetry dependency groups to install (default: install all dependencies).
    run: when_changed
    deps:
      - task: poetry:install
    cmds:
      - |
        poetry install \
          {{if .POETRY_GROUPS}} --only {{.POETRY_GROUPS}} {{end}}

  poetry:sync:
    desc: Sync poetry.lock
    deps:
      - task: poetry:install
    cmds:
      - |
        poetry lock \
          --no-cache \
          --no-update

  poetry:validate:
    desc: Validate pyproject.toml
    deps:
      - task: poetry:install
    cmds:
      - |
        poetry check \
          --lock

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
  shell:check:
    desc: |
      Check for problems with shell scripts.
      Environment variable parameters:
      SCRIPT_PATH: Path of the script to be checked.
    cmds:
      - |
        if [[ "{{.SCRIPT_PATH}}" == "" ]]; then
          echo "Path to script file must be passed to this task via the SCRIPT_PATH taskfile variable."
          echo "See: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/check-shell-task.md#usage"
          exit 1
        fi
      - |
        if ! which shellcheck &>/dev/null; then
          echo "shellcheck not installed or not in PATH."
          echo "Please install: https://github.com/koalaman/shellcheck#installing"
          exit 1
        fi
      - |
        shellcheck \
          --format={{default "tty" .SHELLCHECK_FORMAT}} \
          "{{.SCRIPT_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
  shell:check-mode:
    desc: |
      Check for non-executable shell scripts.
      Environment variable parameters:
      SCRIPT_PATH: Path of the script to be checked.
    cmds:
      - |
        if [[ "{{.SCRIPT_PATH}}" == "" ]]; then
          echo "Path to script file must be passed to this task via the SCRIPT_PATH taskfile variable."
          echo "See: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/check-shell-task.md#usage"
          exit 1
        fi
      - |
        test \
          -x \
          "{{.SCRIPT_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
  shell:format:
    desc: |
      Format shell script files.
      Environment variable parameters:
      SCRIPT_PATH: Path of the script to be formatted.
    cmds:
      - |
        if [[ "{{.SCRIPT_PATH}}" == "" ]]; then
          echo "Path to script file must be passed to this task via the SCRIPT_PATH taskfile variable."
          echo "See: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/check-shell-task.md#usage"
          exit 1
        fi
      - |
        go \
          install \
            mvdan.cc/sh/v3/cmd/shfmt
      - |
        shfmt \
          -w \
          "{{.SCRIPT_PATH}}"

  # Make a temporary file named according to the passed TEMPLATE variable and print the path passed to stdout
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/windows-task/Taskfile.yml
  utility:mktemp-file:
    vars:
      RAW_PATH:
        sh: mktemp --tmpdir "{{.TEMPLATE}}"
    cmds:
      - task: utility:normalize-path
        vars:
          RAW_PATH: "{{.RAW_PATH}}"

  # Print a normalized version of the path passed via the RAW_PATH variable to stdout
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/windows-task/Taskfile.yml
  utility:normalize-path:
    cmds:
      - |
        if [[ "{{.OS}}" == "Windows_NT" ]] && which cygpath &>/dev/null; then
            # Even though the shell handles POSIX format absolute paths as expected, external applications do not.
            # So paths passed to such applications must first be converted to Windows format.
            cygpath -w "{{.RAW_PATH}}"
        else
          echo "{{.RAW_PATH}}"
        fi

  # Parameter variables:
  # - YAMLLINT_FORMAT: yamllint output format (default: colored).
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-yaml-task/Taskfile.yml
  yaml:lint:
    desc: Check for problems with YAML files
    deps:
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - poetry run yamllint --format {{default "colored" .YAMLLINT_FORMAT}} .
